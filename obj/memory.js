// Generated by CoffeeScript 1.4.0

/*1964js - JavaScript/HTML5 port of 1964 - N64 emulator
Copyright (C) 2012 Joel Middendorf

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/


(function() {
  /** @const */ var MEMORY_START_RDRAM = 0x00000000;

  /** @const */ var MEMORY_SIZE_RDRAM = 0x800000;

  /** @const */ var MEMORY_START_RAMREGS4 = 0x03F04000;

  /** @const */ var MEMORY_SIZE_RAMREGS4 = 0x10000;

  /** @const */ var MEMORY_START_RAMREGS0 = 0x03F00000;

  /** @const */ var MEMORY_START_RAMREGS8 = 0x03F80000;

  /** @const */ var MEMORY_SIZE_RAMREGS0 = 0x10000;

  /** @const */ var MEMORY_SIZE_RAMREGS8 = 0x10000;

  /** @const */ var MEMORY_START_SPMEM = 0x04000000;

  /** @const */ var MEMORY_START_SPREG_1 = 0x04040000;

  /** @const */ var MEMORY_START_SPREG_2 = 0x04080000;

  /** @const */ var MEMORY_START_DPC = 0x04100000;

  /** @const */ var MEMORY_START_DPS = 0x04200000;

  /** @const */ var MEMORY_START_MI = 0x04300000;

  /** @const */ var MEMORY_START_VI = 0x04400000;

  /** @const */ var MEMORY_START_AI = 0x04500000;

  /** @const */ var MEMORY_START_PI = 0x04600000;

  /** @const */ var MEMORY_START_RI = 0x04700000;

  /** @const */ var MEMORY_START_SI = 0x04800000;

  /** @const */ var MEMORY_START_C2A1 = 0x05000000;

  /** @const */ var MEMORY_START_C1A1 = 0x06000000;

  /** @const */ var MEMORY_START_C2A2 = 0x08000000;

  /** @const */ var MEMORY_START_ROM_IMAGE = 0x10000000;

  /** @const */ var MEMORY_START_GIO = 0x18000000;

  /** @const */ var MEMORY_START_C1A3 = 0x1FD00000;

  /** @const */ var MEMORY_START_DUMMY = 0x1FFF0000;

  /** @const */ var MEMORY_SIZE_SPMEM = 0x10000;

  /** @const */ var MEMORY_SIZE_SPREG_1 = 0x10000;

  /** @const */ var MEMORY_SIZE_SPREG_2 = 0x10000;

  /** @const */ var MEMORY_SIZE_DPC = 0x10000;

  /** @const */ var MEMORY_SIZE_DPS = 0x10000;

  /** @const */ var MEMORY_SIZE_MI = 0x10000;

  /** @const */ var MEMORY_SIZE_VI = 0x10000;

  /** @const */ var MEMORY_SIZE_AI = 0x10000;

  /** @const */ var MEMORY_SIZE_PI = 0x10000;

  /** @const */ var MEMORY_SIZE_RI = 0x10000;

  /** @const */ var MEMORY_SIZE_SI = 0x10000;

  /** @const */ var MEMORY_SIZE_C2A1 = 0x10000;

  /** @const */ var MEMORY_SIZE_C1A1 = 0x10000;

  /** @const */ var MEMORY_SIZE_C2A2 = 0x20000;

  /** @const */ var MEMORY_SIZE_GIO = 0x10000;

  /** @const */ var MEMORY_SIZE_C1A3 = 0x10000;

  /** @const */ var MEMORY_SIZE_DUMMY = 0x10000;

  /** @const */ var MEMORY_START_PIF = 0x1FC00000;

  /** @const */ var MEMORY_START_PIF_RAM = 0x1FC007C0;

  /** @const */ var MEMORY_SIZE_PIF = 0x10000;

  /** @const */ var MEMORY_SIZE_ROM = 0x4000000;

  var C1964jsMemory, root;

  C1964jsMemory = (function() {

    function C1964jsMemory(core) {
      this.core = core;
      this.romUint8Array = undefined;
      this.rom = undefined;
      this.rdramArrayBuffer = new ArrayBuffer(0x800000);
      this.rdramUint8Array = new Uint8Array(this.rdramArrayBuffer);
      this.rdramUint16Array = new Uint16Array(this.rdramArrayBuffer);
      this.rdramUint32Array = new Uint32Array(this.rdramArrayBuffer);
      this.rdramDataView = new DataView(this.rdramArrayBuffer);
      this.spMemUint8Array = new Uint8Array(0x10000);
      this.spReg1Uint8Array = new Uint8Array(0x10000);
      this.spReg2Uint8Array = new Uint8Array(0x10000);
      this.dpcUint8Array = new Uint8Array(0x10000);
      this.dpsUint8Array = new Uint8Array(0x10000);
      this.miUint8Array = new Uint8Array(0x10000);
      this.viUint8Array = new Uint8Array(0x10000);
      this.aiUint8Array = new Uint8Array(0x10000);
      this.piUint8Array = new Uint8Array(0x10000);
      this.siUint8Array = new Uint8Array(0x10000);
      this.c2a1Uint8Array = new Uint8Array(0x10000);
      this.c1a1Uint8Array = new Uint8Array(0x10000);
      this.c2a2Uint8Array = new Uint8Array(0x10000);
      this.c1a3Uint8Array = new Uint8Array(0x10000);
      this.riUint8Array = new Uint8Array(0x10000);
      this.pifUint8Array = new Uint8Array(0x10000);
      this.gioUint8Array = new Uint8Array(0x10000);
      this.ramRegs0Uint8Array = new Uint8Array(0x10000);
      this.ramRegs4Uint8Array = new Uint8Array(0x10000);
      this.ramRegs8Uint8Array = new Uint8Array(0x10000);
      this.dummyReadWriteUint8Array = new Uint8Array(0x10000);
      this.region = [];
      this.region16 = [];
      this.region32 = [];
      this.writeRegion8 = [];
      this.writeRegion16 = [];
      this.writeRegion32 = [];
      this.initRegion(0, 0x80000000, this.readTLB8, this.writeTLB8, this.readTLB16, this.writeTLB16, this.readTLB32, this.writeTLB32);
      this.initRegion(0x80000000, 0x40000000, this.readDummy8, this.writeDummy8, this.readDummy16, this.writeDummy16, this.readDummy32, this.writeDummy32);
      this.initRegion(0xC0000000, 0x40000000, this.readTLB8, this.writeTLB8, this.readTLB16, this.writeTLB16, this.readTLB32, this.writeTLB32);
      this.initRegion(MEMORY_START_RDRAM, MEMORY_SIZE_RDRAM, this.readRdram8, this.writeRdram8, this.readRdram16, this.writeRdram16, this.readRdram32, this.writeRdram32);
      this.initRegion(MEMORY_START_RAMREGS4, MEMORY_START_RAMREGS4, this.readRamRegs4, this.writeRamRegs4, this.readRamRegs4, this.writeRamRegs4, this.readRamRegs4, this.writeRamRegs4);
      this.initRegion(MEMORY_START_SPMEM, MEMORY_SIZE_SPMEM, this.readSpMem8, this.writeSpMem8, this.readSpMem16, this.writeSpMem16, this.readSpMem32, this.writeSpMem32);
      this.initRegion(MEMORY_START_SPREG_1, MEMORY_SIZE_SPREG_1, this.readSpReg1_8, this.writeSpReg1_8, this.readSpReg1_16, this.writeSpReg1_16, this.readSpReg1_32, this.writeSpReg1_32);
      this.initRegion(MEMORY_START_SPREG_2, MEMORY_SIZE_SPREG_2, this.readSpReg2_8, this.writeSpReg2_8, this.readSpReg2_16, this.writeSpReg2_16, this.readSpReg2_32, this.writeSpReg2_32);
      this.initRegion(MEMORY_START_DPC, MEMORY_SIZE_DPC, this.readDpc8, this.writeDpc8, this.readDpc16, this.writeDpc16, this.readDpc32, this.writeDpc32);
      this.initRegion(MEMORY_START_DPS, MEMORY_SIZE_DPS, this.readDps8, this.writeDps8, this.readDps16, this.writeDps16, this.readDps32, this.writeDps32);
      this.initRegion(MEMORY_START_MI, MEMORY_SIZE_MI, this.readMi8, this.writeMi8, this.readMi16, this.writeMi16, this.readMi32, this.writeMi32);
      this.initRegion(MEMORY_START_VI, MEMORY_SIZE_VI, this.readVi8, this.writeVi8, this.readVi16, this.writeVi16, this.readVi32, this.writeVi32);
      this.initRegion(MEMORY_START_AI, MEMORY_SIZE_AI, this.readAi8, this.writeAi8, this.readAi16, this.writeAi16, this.readAi32, this.writeAi32);
      this.initRegion(MEMORY_START_PI, MEMORY_SIZE_PI, this.readPi8, this.writePi8, this.readPi16, this.writePi16, this.readPi32, this.writePi32);
      this.initRegion(MEMORY_START_SI, MEMORY_SIZE_SI, this.readSi8, this.writeSi8, this.readSi16, this.writeSi16, this.readSi32, this.writeSi32);
      this.initRegion(MEMORY_START_C2A1, MEMORY_SIZE_C2A1, this.readC2A1_8, this.writeC2A1_8, this.readC2A1_16, this.writeC2A1_16, this.readC2A1_32, this.writeC2A1_32);
      this.initRegion(MEMORY_START_C1A1, MEMORY_SIZE_C1A1, this.readC1A1_8, this.writeC1A1_8, this.readC1A1_16, this.writeC1A1_16, this.readC1A1_32, this.writeC1A1_32);
      this.initRegion(MEMORY_START_C2A2, MEMORY_SIZE_C2A2, this.readC2A2_8, this.writeC2A2_8, this.readC2A2_16, this.writeC2A2_16, this.readC2A2_32, this.writeC2A2_32);
      this.initRegion(MEMORY_START_ROM_IMAGE, MEMORY_SIZE_ROM, this.readRom8, this.writeRom8, this.readRom16, this.writeRom16, this.readRom32, this.writeRom);
      this.initRegion(MEMORY_START_C1A3, MEMORY_SIZE_C1A3, this.readC1A3_8, this.writeC1A3_8, this.readC1A3_16, this.writeC1A3_16, this.readC1A3_32, this.writeC1A3_32);
      this.initRegion(MEMORY_START_RI, MEMORY_SIZE_RI, this.readRi8, this.writeRi8, this.readRi16, this.writeRi16, this.readRi32, this.writeRi32);
      this.initRegion(MEMORY_START_PIF, MEMORY_SIZE_PIF, this.readPif8, this.writePif8, this.readPif16, this.writePif16, this.readPif32, this.writePif32);
      this.initRegion(MEMORY_START_GIO, MEMORY_SIZE_GIO, this.readGio8, this.writeGio8, this.readGio16, this.writeGio16, this.readGio32, this.writeGio32);
      this.initRegion(MEMORY_START_RAMREGS0, MEMORY_SIZE_RAMREGS0, this.readRamRegs0_8, this.writeRamRegs0_8, this.readRamRegs0_16, this.writeRamRegs0_16, this.readRamRegs0_32, this.writeRamRegs0_32);
      this.initRegion(MEMORY_START_RAMREGS8, MEMORY_SIZE_RAMREGS8, this.readRamRegs8_8, this.writeRamRegs8_8, this.readRamRegs8_16, this.writeRamRegs8_16, this.readRamRegs8_32, this.writeRamRegs8_32);
      this.physRegion = void 0;
    }

    C1964jsMemory.prototype.initRegion = function(start, size, readRegion8, writeRegion8, readRegion16, writeRegion16, readRegion32, writeRegion32) {
      var end;
      end = (start + size) >>> 14;
      start >>>= 14;
      while (start < end) {
        this.region[start] = readRegion8;
        this.region16[start] = readRegion16;
        this.region32[start] = readRegion32;
        this.writeRegion8[start] = writeRegion8;
        this.writeRegion16[start] = writeRegion16;
        this.writeRegion32[start] = writeRegion32;
        start++;
      }
    };

    C1964jsMemory.prototype.readDummy8 = function(that, a) {
      var off_;
      off_ = a & 0x0000FFFC;
      return that.dummyReadWriteUint8Array[off_];
    };

    C1964jsMemory.prototype.readDummy16 = function(that, a) {
      var off_;
      off_ = a & 0x0000FFFC;
      return that.dummyReadWriteUint8Array[off_] << 8 | that.dummyReadWriteUint8Array[off_ + 1];
    };

    C1964jsMemory.prototype.readDummy32 = function(that, a) {
      var off_;
      off_ = a & 0x0000FFFC;
      return that.dummyReadWriteUint8Array[off_] << 24 | that.dummyReadWriteUint8Array[off_ + 1] << 16 | that.dummyReadWriteUint8Array[off_ + 2] << 8 | that.dummyReadWriteUint8Array[off_ + 3];
    };

    C1964jsMemory.prototype.readRdram8 = function(that, a) {
      return that.rdramUint8Array[a];
    };

    C1964jsMemory.prototype.readRdram16 = function(that, a) {
      return that.rdramUint8Array[a] << 8 | that.rdramUint8Array[a + 1];
    };

    C1964jsMemory.prototype.readRdram32 = function(that, a) {
      return that.rdramUint8Array[a] << 24 | that.rdramUint8Array[a + 1] << 16 | that.rdramUint8Array[a + 2] << 8 | that.rdramUint8Array[a + 3];
    };

    C1964jsMemory.prototype.readRamRegs0_8 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_RAMREGS0;
      return that.ramRegs0Uint8Array[off_];
    };

    C1964jsMemory.prototype.readRamRegs0_16 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_RAMREGS0;
      return that.ramRegs0Uint8Array[off_] << 8 | that.ramRegs0Uint8Array[off_ + 1];
    };

    C1964jsMemory.prototype.readRamRegs0_32 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_RAMREGS0;
      return that.ramRegs0Uint8Array[off_] << 24 | that.ramRegs0Uint8Array[off_ + 1] << 16 | that.ramRegs0Uint8Array[off_ + 2] << 8 | that.ramRegs0Uint8Array[off_ + 3];
    };

    C1964jsMemory.prototype.readRamRegs4_8 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_RAMREGS4;
      return that.ramRegs4Uint8Array[off_];
    };

    C1964jsMemory.prototype.readRamRegs4_16 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_RAMREGS4;
      return that.ramRegs4Uint8Array[off_] << 8 | that.ramRegs4Uint8Array[off_ + 1];
    };

    C1964jsMemory.prototype.readRamRegs4_32 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_RAMREGS4;
      return that.ramRegs4Uint8Array[off_] << 24 | that.ramRegs4Uint8Array[off_ + 1] << 16 | that.ramRegs4Uint8Array[off_ + 2] << 8 | that.ramRegs4Uint8Array[off_ + 3];
    };

    C1964jsMemory.prototype.readRamRegs8_8 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_RAMREGS8;
      return that.ramRegs8Uint8Array[off_];
    };

    C1964jsMemory.prototype.readRamRegs8_16 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_RAMREGS8;
      return that.ramRegs8Uint8Array[off_] << 8 | that.ramRegs8Uint8Array[off_ + 1];
    };

    C1964jsMemory.prototype.readRamRegs8_32 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_RAMREGS8;
      return that.ramRegs8Uint8Array[off_] << 24 | that.ramRegs8Uint8Array[off_ + 1] << 16 | that.ramRegs8Uint8Array[off_ + 2] << 8 | that.ramRegs8Uint8Array[off_ + 3];
    };

    C1964jsMemory.prototype.readSpMem8 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_SPMEM;
      return that.spMemUint8Array[off_];
    };

    C1964jsMemory.prototype.readSpMem16 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_SPMEM;
      return that.spMemUint8Array[off_] << 8 | that.spMemUint8Array[off_ + 1];
    };

    C1964jsMemory.prototype.readSpMem32 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_SPMEM;
      return that.spMemUint8Array[off_] << 24 | that.spMemUint8Array[off_ + 1] << 16 | that.spMemUint8Array[off_ + 2] << 8 | that.spMemUint8Array[off_ + 3];
    };

    C1964jsMemory.prototype.readSpReg1_8 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_SPREG_1;
      return that.core.interrupts.readSPReg1(off_);
    };

    C1964jsMemory.prototype.readSpReg1_16 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_SPREG_1;
      return that.core.interrupts.readSPReg1(off_);
    };

    C1964jsMemory.prototype.readSpReg1_32 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_SPREG_1;
      return that.core.interrupts.readSPReg1(off_);
    };

    C1964jsMemory.prototype.readSpReg2_8 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_SPREG_2;
      return that.spReg2Uint8Array[off_];
    };

    C1964jsMemory.prototype.readSpReg2_16 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_SPREG_2;
      return that.spReg2Uint8Array[off_] << 8 | that.spReg2Uint8Array[off_ + 1];
    };

    C1964jsMemory.prototype.readSpReg2_32 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_SPREG_2;
      return that.spReg2Uint8Array[off_] << 24 | that.spReg2Uint8Array[off_ + 1] << 16 | that.spReg2Uint8Array[off_ + 2] << 8 | that.spReg2Uint8Array[off_ + 3];
    };

    C1964jsMemory.prototype.readDpc8 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_DPC;
      return that.dpcUint8Array[off_];
    };

    C1964jsMemory.prototype.readDpc16 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_DPC;
      return that.dpcUint8Array[off_] << 8 | that.dpcUint8Array[off_ + 1];
    };

    C1964jsMemory.prototype.readDpc32 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_DPC;
      return that.dpcUint8Array[off_] << 24 | that.dpcUint8Array[off_ + 1] << 16 | that.dpcUint8Array[off_ + 2] << 8 | that.dpcUint8Array[off_ + 3];
    };

    C1964jsMemory.prototype.readDps8 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_DPS;
      return that.dpsUint8Array[off_];
    };

    C1964jsMemory.prototype.readDps16 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_DPS;
      return that.dpsUint8Array[off_] << 8 | that.dpsUint8Array[off_ + 1];
    };

    C1964jsMemory.prototype.readDps32 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_DPS;
      return that.dpsUint8Array[off_] << 24 | that.dpsUint8Array[off_ + 1] << 16 | that.dpsUint8Array[off_ + 2] << 8 | that.dpsUint8Array[off_ + 3];
    };

    C1964jsMemory.prototype.readMi8 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_MI;
      return that.miUint8Array[off_];
    };

    C1964jsMemory.prototype.readMi16 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_MI;
      return that.miUint8Array[off_] << 8 | that.miUint8Array[off_ + 1];
    };

    C1964jsMemory.prototype.readMi32 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_MI;
      return that.miUint8Array[off_] << 24 | that.miUint8Array[off_ + 1] << 16 | that.miUint8Array[off_ + 2] << 8 | that.miUint8Array[off_ + 3];
    };

    C1964jsMemory.prototype.readVi8 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_VI;
      return that.core.interrupts.readVI(off_);
    };

    C1964jsMemory.prototype.readVi16 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_VI;
      return that.core.interrupts.readVI(off_);
    };

    C1964jsMemory.prototype.readVi32 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_VI;
      return that.core.interrupts.readVI(off_);
    };

    C1964jsMemory.prototype.readAi8 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_AI;
      return that.core.interrupts.readAI(off_);
    };

    C1964jsMemory.prototype.readAi16 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_AI;
      return that.core.interrupts.readAI(off_);
    };

    C1964jsMemory.prototype.readAi32 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_AI;
      return that.core.interrupts.readAI(off_);
    };

    C1964jsMemory.prototype.readPi8 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_PI;
      return that.piUint8Array[off_];
    };

    C1964jsMemory.prototype.readPi16 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_PI;
      return that.piUint8Array[off_] << 8 | that.piUint8Array[off_ + 1];
    };

    C1964jsMemory.prototype.readPi32 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_PI;
      return that.piUint8Array[off_] << 24 | that.piUint8Array[off_ + 1] << 16 | that.piUint8Array[off_ + 2] << 8 | that.piUint8Array[off_ + 3];
    };

    C1964jsMemory.prototype.readSi8 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_SI;
      return that.core.interrupts.readSI(off_);
    };

    C1964jsMemory.prototype.readSi16 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_SI;
      return that.core.interrupts.readSI(off_);
    };

    C1964jsMemory.prototype.readSi32 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_SI;
      return that.core.interrupts.readSI(off_);
    };

    C1964jsMemory.prototype.readC2A1_8 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_C2A1;
      return that.c2a1Uint8Array[off_];
    };

    C1964jsMemory.prototype.readC2A1_16 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_C2A1;
      return that.c2a1Uint8Array[off_] << 8 | that.c2a1Uint8Array[off_ + 1];
    };

    C1964jsMemory.prototype.readC2A1_32 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_C2A1;
      return that.c2a1Uint8Array[off_] << 24 | that.c2a1Uint8Array[off_ + 1] << 16 | that.c2a1Uint8Array[off_ + 2] << 8 | that.c2a1Uint8Array[off_ + 3];
    };

    C1964jsMemory.prototype.readC1A1_8 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_C1A1;
      return that.c1a1Uint8Array[off_];
    };

    C1964jsMemory.prototype.readC1A1_16 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_C1A1;
      return that.c1a1Uint8Array[off_] << 8 | that.c1a1Uint8Array[off_ + 1];
    };

    C1964jsMemory.prototype.readC1A1_32 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_C1A1;
      return that.c1a1Uint8Array[off_] << 24 | that.c1a1Uint8Array[off_ + 1] << 16 | that.c1a1Uint8Array[off_ + 2] << 8 | that.c1a1Uint8Array[off_ + 3];
    };

    C1964jsMemory.prototype.readC2A2_8 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_C2A2;
      return that.c2a2Uint8Array[off_];
    };

    C1964jsMemory.prototype.readC2A2_16 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_C2A2;
      return that.c2a2Uint8Array[off_] << 8 | that.c2a2Uint8Array[off_ + 1];
    };

    C1964jsMemory.prototype.readC2A2_32 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_C2A2;
      return that.c2a2Uint8Array[off_] << 24 | that.c2a2Uint8Array[off_ + 1] << 16 | that.c2a2Uint8Array[off_ + 2] << 8 | that.c2a2Uint8Array[off_ + 3];
    };

    C1964jsMemory.prototype.readRom8 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_ROM_IMAGE;
      return that.romUint8Array[off_];
    };

    C1964jsMemory.prototype.readRom16 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_ROM_IMAGE;
      return that.romUint8Array[off_] << 8 | that.romUint8Array[off_ + 1];
    };

    C1964jsMemory.prototype.readRom32 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_ROM_IMAGE;
      return that.romUint8Array[off_] << 24 | that.romUint8Array[off_ + 1] << 16 | that.romUint8Array[off_ + 2] << 8 | that.romUint8Array[off_ + 3];
    };

    C1964jsMemory.prototype.readC1A3_8 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_C1A3;
      return that.c1a3Uint8Array[off_];
    };

    C1964jsMemory.prototype.readC1A3_16 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_C1A3;
      return that.c1a3Uint8Array[off_] << 8 | that.c1a3Uint8Array[off_ + 1];
    };

    C1964jsMemory.prototype.readC1A3_32 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_C1A3;
      return that.c1a3Uint8Array[off_] << 24 | that.c1a3Uint8Array[off_ + 1] << 16 | that.c1a3Uint8Array[off_ + 2] << 8 | that.c1a3Uint8Array[off_ + 3];
    };

    C1964jsMemory.prototype.readRi8 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_RI;
      return that.riUint8Array[off_];
    };

    C1964jsMemory.prototype.readRi16 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_RI;
      return that.riUint8Array[off_] << 8 | that.riUint8Array[off_ + 1];
    };

    C1964jsMemory.prototype.readRi32 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_RI;
      return that.riUint8Array[off_] << 24 | that.riUint8Array[off_ + 1] << 16 | that.riUint8Array[off_ + 2] << 8 | that.riUint8Array[off_ + 3];
    };

    C1964jsMemory.prototype.readPif8 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_PIF;
      return that.pifUint8Array[off_];
    };

    C1964jsMemory.prototype.readPif16 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_PIF;
      return that.pifUint8Array[off_] << 8 | that.pifUint8Array[off_ + 1];
    };

    C1964jsMemory.prototype.readPif32 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_PIF;
      return that.pifUint8Array[off_] << 24 | that.pifUint8Array[off_ + 1] << 16 | that.pifUint8Array[off_ + 2] << 8 | that.pifUint8Array[off_ + 3];
    };

    C1964jsMemory.prototype.readGio8 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_GIO;
      return that.gioUint8Array[off_];
    };

    C1964jsMemory.prototype.readGio16 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_GIO;
      return that.gioUint8Array[off_] << 8 | that.gioUint8Array[off_ + 1];
    };

    C1964jsMemory.prototype.readGio32 = function(that, a) {
      var off_;
      off_ = a - MEMORY_START_GIO;
      return that.gioUint8Array[off_] << 24 | that.gioUint8Array[off_ + 1] << 16 | that.gioUint8Array[off_ + 2] << 8 | that.gioUint8Array[off_ + 3];
    };

    C1964jsMemory.prototype.writeRdram8 = function(that, val, a) {
      that.rdramUint8Array[a] = val;
    };

    C1964jsMemory.prototype.writeRdram16 = function(that, val, a) {
      that.rdramUint8Array[a] = val >> 8;
      that.rdramUint8Array[a + 1] = val;
    };

    C1964jsMemory.prototype.writeRdram32 = function(that, val, a) {
      that.rdramUint8Array[a] = val >> 24;
      that.rdramUint8Array[a + 1] = val >> 16;
      that.rdramUint8Array[a + 2] = val >> 8;
      that.rdramUint8Array[a + 3] = val;
    };

    C1964jsMemory.prototype.writeSpMem8 = function(that, val, a) {
      var off_;
      off_ = a - MEMORY_START_SPMEM;
      that.spMemUint8Array[off_] = val;
    };

    C1964jsMemory.prototype.writeSpMem16 = function(that, val, a) {
      var off_;
      off_ = a - MEMORY_START_SPMEM;
      that.spMemUint8Array[off_] = val >> 8;
      that.spMemUint8Array[off_ + 1] = val;
    };

    C1964jsMemory.prototype.writeSpMem32 = function(that, val, a) {
      var off_;
      off_ = a - MEMORY_START_SPMEM;
      that.spMemUint8Array[off_] = val >> 24;
      that.spMemUint8Array[off_ + 1] = val >> 16;
      that.spMemUint8Array[off_ + 2] = val >> 8;
      that.spMemUint8Array[off_ + 3] = val;
    };

    C1964jsMemory.prototype.writeRi8 = function(that, val, a) {
      var off_;
      off_ = a - MEMORY_START_RI;
      that.riUint8Array[off_] = val;
    };

    C1964jsMemory.prototype.writeRi16 = function(that, val, a) {
      var off_;
      off_ = a - MEMORY_START_RI;
      that.riUint8Array[off_] = val >> 8;
      that.riUint8Array[off_ + 1] = val;
    };

    C1964jsMemory.prototype.writeRi32 = function(that, val, a) {
      var off_;
      off_ = a - MEMORY_START_RI;
      that.riUint8Array[off_] = val >> 24;
      that.riUint8Array[off_ + 1] = val >> 16;
      that.riUint8Array[off_ + 2] = val >> 8;
      that.riUint8Array[off_ + 3] = val;
    };

    C1964jsMemory.prototype.writeMi8 = function(that, val, a, pc, isDelaySlot) {
      var off_;
      off_ = a - MEMORY_START_MI;
      that.core.interrupts.writeMI(off_, val, pc, isDelaySlot);
    };

    C1964jsMemory.prototype.writeMi16 = function(that, val, a, pc, isDelaySlot) {
      var off_;
      off_ = a - MEMORY_START_MI;
      that.core.interrupts.writeMI(off_, val, pc, isDelaySlot);
    };

    C1964jsMemory.prototype.writeMi32 = function(that, val, a, pc, isDelaySlot) {
      var off_;
      off_ = a - MEMORY_START_MI;
      that.core.interrupts.writeMI(off_, val, pc, isDelaySlot);
    };

    C1964jsMemory.prototype.writeRamRegs8_8 = function(that, val, a) {
      var off_;
      off_ = a - MEMORY_START_RAMREGS8;
      that.ramRegs8Uint8Array[off_] = val;
    };

    C1964jsMemory.prototype.writeRamRegs8_16 = function(that, val, a) {
      var off_;
      off_ = a - MEMORY_START_RAMREGS8;
      that.ramRegs8Uint8Array[off_] = val >> 8;
      that.ramRegs8Uint8Array[off_ + 1] = val;
    };

    C1964jsMemory.prototype.writeRamRegs8_32 = function(that, val, a) {
      var off_;
      off_ = a - MEMORY_START_RAMREGS8;
      that.ramRegs8Uint8Array[off_] = val >> 24;
      that.ramRegs8Uint8Array[off_ + 1] = val >> 16;
      that.ramRegs8Uint8Array[off_ + 2] = val >> 8;
      that.ramRegs8Uint8Array[off_ + 3] = val;
    };

    C1964jsMemory.prototype.writeRamRegs4_8 = function(that, val, a) {
      var off_;
      off_ = a - MEMORY_START_RAMREGS4;
      that.ramRegs4Uint8Array[off_] = val;
    };

    C1964jsMemory.prototype.writeRamRegs4_16 = function(that, val, a) {
      var off_;
      off_ = a - MEMORY_START_RAMREGS4;
      that.ramRegs4Uint8Array[off_] = val >> 8;
      that.ramRegs4Uint8Array[off_ + 1] = val;
    };

    C1964jsMemory.prototype.writeRamRegs4_32 = function(that, val, a) {
      var off_;
      off_ = a - MEMORY_START_RAMREGS4;
      that.ramRegs4Uint8Array[off_] = val >> 24;
      that.ramRegs4Uint8Array[off_ + 1] = val >> 16;
      that.ramRegs4Uint8Array[off_ + 2] = val >> 8;
      that.ramRegs4Uint8Array[off_ + 3] = val;
    };

    C1964jsMemory.prototype.writeRamRegs0_8 = function(that, val, a) {
      var off_;
      off_ = a - MEMORY_START_RAMREGS0;
      that.ramRegs0Uint8Array[off_] = val;
    };

    C1964jsMemory.prototype.writeRamRegs0_16 = function(that, val, a) {
      var off_;
      off_ = a - MEMORY_START_RAMREGS0;
      that.ramRegs0Uint8Array[off_] = val >> 8;
      that.ramRegs0Uint8Array[off_ + 1] = val;
    };

    C1964jsMemory.prototype.writeRamRegs0_32 = function(that, val, a) {
      var off_;
      off_ = a - MEMORY_START_RAMREGS0;
      that.ramRegs0Uint8Array[off_] = val >> 24;
      that.ramRegs0Uint8Array[off_ + 1] = val >> 16;
      that.ramRegs0Uint8Array[off_ + 2] = val >> 8;
      that.ramRegs0Uint8Array[off_ + 3] = val;
    };

    C1964jsMemory.prototype.writeSpReg1_8 = function(that, val, a, pc, isDelaySlot) {
      var off_;
      off_ = a - MEMORY_START_SPREG_1;
      that.core.interrupts.writeSPReg1(off_, val, pc, isDelaySlot);
    };

    C1964jsMemory.prototype.writeSpReg1_16 = function(that, val, a, pc, isDelaySlot) {
      var off_;
      off_ = a - MEMORY_START_SPREG_1;
      that.core.interrupts.writeSPReg1(off_, val, pc, isDelaySlot);
    };

    C1964jsMemory.prototype.writeSpReg1_32 = function(that, val, a, pc, isDelaySlot) {
      var off_;
      off_ = a - MEMORY_START_SPREG_1;
      that.core.interrupts.writeSPReg1(off_, val, pc, isDelaySlot);
    };

    C1964jsMemory.prototype.writePi8 = function(that, val, a, pc, isDelaySlot) {
      var off_;
      off_ = a - MEMORY_START_PI;
      that.core.interrupts.writePI(off_, val, pc, isDelaySlot);
    };

    C1964jsMemory.prototype.writePi16 = function(that, val, a, pc, isDelaySlot) {
      var off_;
      off_ = a - MEMORY_START_PI;
      that.core.interrupts.writePI(off_, val, pc, isDelaySlot);
    };

    C1964jsMemory.prototype.writePi32 = function(that, val, a, pc, isDelaySlot) {
      var off_;
      off_ = a - MEMORY_START_PI;
      that.core.interrupts.writePI(off_, val, pc, isDelaySlot);
    };

    C1964jsMemory.prototype.writeSi8 = function(that, val, a, pc, isDelaySlot) {
      var off_;
      off_ = a - MEMORY_START_SI;
      that.core.interrupts.writeSI(off_, val, pc, isDelaySlot);
    };

    C1964jsMemory.prototype.writeSi16 = function(that, val, a, pc, isDelaySlot) {
      var off_;
      off_ = a - MEMORY_START_SI;
      that.core.interrupts.writeSI(off_, val, pc, isDelaySlot);
    };

    C1964jsMemory.prototype.writeSi32 = function(that, val, a, pc, isDelaySlot) {
      var off_;
      off_ = a - MEMORY_START_SI;
      that.core.interrupts.writeSI(off_, val, pc, isDelaySlot);
    };

    C1964jsMemory.prototype.writeAi8 = function(that, val, a, pc, isDelaySlot) {
      var off_;
      off_ = a - MEMORY_START_AI;
      that.core.interrupts.writeAI(off_, val, pc, isDelaySlot);
    };

    C1964jsMemory.prototype.writeAi16 = function(that, val, a, pc, isDelaySlot) {
      var off_;
      off_ = a - MEMORY_START_AI;
      that.core.interrupts.writeAI(off_, val, pc, isDelaySlot);
    };

    C1964jsMemory.prototype.writeAi32 = function(that, val, a, pc, isDelaySlot) {
      var off_;
      off_ = a - MEMORY_START_AI;
      that.core.interrupts.writeAI(off_, val, pc, isDelaySlot);
    };

    C1964jsMemory.prototype.writeVi8 = function(that, val, a, pc, isDelaySlot) {
      var off_;
      off_ = a - MEMORY_START_VI;
      that.core.interrupts.writeVI(off_, val, pc, isDelaySlot);
    };

    C1964jsMemory.prototype.writeVi16 = function(that, val, a, pc, isDelaySlot) {
      var off_;
      off_ = a - MEMORY_START_VI;
      that.core.interrupts.writeVI(off_, val, pc, isDelaySlot);
    };

    C1964jsMemory.prototype.writeVi32 = function(that, val, a, pc, isDelaySlot) {
      var off_;
      off_ = a - MEMORY_START_VI;
      that.core.interrupts.writeVI(off_, val, pc, isDelaySlot);
    };

    C1964jsMemory.prototype.writeSpReg2_8 = function(that, val, a, pc, isDelaySlot) {
      var off_;
      off_ = a - MEMORY_START_SPREG_2;
      that.core.interrupts.writeSPReg2(off_, val, pc, isDelaySlot);
    };

    C1964jsMemory.prototype.writeSpReg2_16 = function(that, val, a, pc, isDelaySlot) {
      var off_;
      off_ = a - MEMORY_START_SPREG_2;
      that.core.interrupts.writeSPReg2(off_, val, pc, isDelaySlot);
    };

    C1964jsMemory.prototype.writeSpReg2_32 = function(that, val, a, pc, isDelaySlot) {
      var off_;
      off_ = a - MEMORY_START_SPREG_2;
      that.core.interrupts.writeSPReg2(off_, val, pc, isDelaySlot);
    };

    C1964jsMemory.prototype.writeDpc8 = function(that, val, a, pc, isDelaySlot) {
      var off_;
      off_ = a - MEMORY_START_DPC;
      that.core.interrupts.writeDPC(off_, val, pc, isDelaySlot);
    };

    C1964jsMemory.prototype.writeDpc16 = function(that, val, a, pc, isDelaySlot) {
      var off_;
      off_ = a - MEMORY_START_DPC;
      that.core.interrupts.writeDPC(off_, val, pc, isDelaySlot);
    };

    C1964jsMemory.prototype.writeDpc32 = function(that, val, a, pc, isDelaySlot) {
      var off_;
      off_ = a - MEMORY_START_DPC;
      that.core.interrupts.writeDPC(off_, val, pc, isDelaySlot);
    };

    C1964jsMemory.prototype.writeDps8 = function(that, val, a) {
      var off_;
      off_ = a - MEMORY_START_DPS;
      that.dpsUint8Array[off_] = val;
    };

    C1964jsMemory.prototype.writeDps16 = function(that, val, a) {
      var off_;
      off_ = a - MEMORY_START_DPS;
      that.dpsUint8Array[off_] = val >> 8;
      that.dpsUint8Array[off_ + 1] = val;
    };

    C1964jsMemory.prototype.writeDps32 = function(that, val, a) {
      var off_;
      off_ = a - MEMORY_START_DPS;
      that.dpsUint8Array[off_] = val >> 24;
      that.dpsUint8Array[off_ + 1] = val >> 16;
      that.dpsUint8Array[off_ + 2] = val >> 8;
      that.dpsUint8Array[off_ + 3] = val;
    };

    C1964jsMemory.prototype.writeC2A1_8 = function(that, val, a) {
      var off_;
      off_ = a - MEMORY_START_C2A1;
      that.c2a1Uint8Array[off_] = val;
    };

    C1964jsMemory.prototype.writeC2A1_16 = function(that, val, a) {
      var off_;
      off_ = a - MEMORY_START_C2A1;
      that.c2a1Uint8Array[off_] = val >> 8;
      that.c2a1Uint8Array[off_ + 1] = val;
    };

    C1964jsMemory.prototype.writeC2A1_32 = function(that, val, a) {
      var off_;
      off_ = a - MEMORY_START_C2A1;
      that.c2a1Uint8Array[off_] = val >> 24;
      that.c2a1Uint8Array[off_ + 1] = val >> 16;
      that.c2a1Uint8Array[off_ + 2] = val >> 8;
      that.c2a1Uint8Array[off_ + 3] = val;
    };

    C1964jsMemory.prototype.writeC1A1_8 = function(that, val, a) {
      var off_;
      off_ = a - MEMORY_START_C1A1;
      that.c1a1Uint8Array[off_] = val;
    };

    C1964jsMemory.prototype.writeC1A1_16 = function(that, val, a) {
      var off_;
      off_ = a - MEMORY_START_C1A1;
      that.c1a1Uint8Array[off_] = val >> 8;
      that.c1a1Uint8Array[off_ + 1] = val;
    };

    C1964jsMemory.prototype.writeC1A1_32 = function(that, val, a) {
      var off_;
      off_ = a - MEMORY_START_C1A1;
      that.c1a1Uint8Array[off_] = val >> 24;
      that.c1a1Uint8Array[off_ + 1] = val >> 16;
      that.c1a1Uint8Array[off_ + 2] = val >> 8;
      that.c1a1Uint8Array[off_ + 3] = val;
    };

    C1964jsMemory.prototype.writeC2A2_8 = function(that, val, a) {
      var off_;
      off_ = a - MEMORY_START_C2A2;
      that.c2a2Uint8Array[off_] = val;
    };

    C1964jsMemory.prototype.writeC2A2_16 = function(that, val, a) {
      var off_;
      off_ = a - MEMORY_START_C2A2;
      that.c2a2Uint8Array[off_] = val >> 8;
      that.c2a2Uint8Array[off_ + 1] = val;
    };

    C1964jsMemory.prototype.writeC2A2_32 = function(that, val, a) {
      var off_;
      off_ = a - MEMORY_START_C2A2;
      that.c2a2Uint8Array[off_] = val >> 24;
      that.c2a2Uint8Array[off_ + 1] = val >> 16;
      that.c2a2Uint8Array[off_ + 2] = val >> 8;
      that.c2a2Uint8Array[off_ + 3] = val;
    };

    C1964jsMemory.prototype.writeRom8 = function(that, val, a) {
      var off_;
      alert("attempt to overwrite rom!");
      off_ = a - MEMORY_START_ROM_IMAGE;
      that.romUint8Array[off_] = val;
    };

    C1964jsMemory.prototype.writeRom16 = function(that, val, a) {
      var off_;
      off_ = a - MEMORY_START_ROM_IMAGE;
      that.romUint8Array[off_] = val >> 8;
      that.romUint8Array[off_ + 1] = val;
    };

    C1964jsMemory.prototype.writeRom32 = function(that, val, a) {
      var off_;
      off_ = a - MEMORY_START_ROM_IMAGE;
      that.romUint8Array[off_] = val >> 24;
      that.romUint8Array[off_ + 1] = val >> 16;
      that.romUint8Array[off_ + 2] = val >> 8;
      that.romUint8Array[off_ + 3] = val;
    };

    C1964jsMemory.prototype.writeC1A3_8 = function(that, val, a) {
      var off_;
      off_ = a - MEMORY_START_C1A3;
      that.c1a3Uint8Array[off_] = val;
    };

    C1964jsMemory.prototype.writeC1A3_16 = function(that, val, a) {
      var off_;
      off_ = a - MEMORY_START_C1A3;
      that.c1a3Uint8Array[off_] = val >> 8;
      that.c1a3Uint8Array[off_ + 1] = val;
    };

    C1964jsMemory.prototype.writeC1A3_32 = function(that, val, a) {
      var off_;
      off_ = a - MEMORY_START_C1A3;
      that.c1a3Uint8Array[off_] = val >> 24;
      that.c1a3Uint8Array[off_ + 1] = val >> 16;
      that.c1a3Uint8Array[off_ + 2] = val >> 8;
      that.c1a3Uint8Array[off_ + 3] = val;
    };

    C1964jsMemory.prototype.writePif8 = function(that, val, a) {
      var off_;
      off_ = a - MEMORY_START_PIF;
      that.pifUint8Array[off_] = val;
    };

    C1964jsMemory.prototype.writePif16 = function(that, val, a) {
      var off_;
      off_ = a - MEMORY_START_PIF;
      that.pifUint8Array[off_] = val >> 8;
      that.pifUint8Array[off_ + 1] = val;
    };

    C1964jsMemory.prototype.writePif32 = function(that, val, a) {
      var off_;
      off_ = a - MEMORY_START_PIF;
      that.pifUint8Array[off_] = val >> 24;
      that.pifUint8Array[off_ + 1] = val >> 16;
      that.pifUint8Array[off_ + 2] = val >> 8;
      that.pifUint8Array[off_ + 3] = val;
    };

    C1964jsMemory.prototype.writeGio8 = function(that, val, a) {
      var off_;
      off_ = a - MEMORY_START_GIO;
      that.gioUint8Array[off_] = val;
    };

    C1964jsMemory.prototype.writeGio16 = function(that, val, a) {
      var off_;
      off_ = a - MEMORY_START_GIO;
      that.gioUint8Array[off_] = val >> 8;
      that.gioUint8Array[off_ + 1] = val;
    };

    C1964jsMemory.prototype.writeGio32 = function(that, val, a) {
      var off_;
      off_ = a - MEMORY_START_GIO;
      that.gioUint8Array[off_] = val >> 24;
      that.gioUint8Array[off_ + 1] = val >> 16;
      that.gioUint8Array[off_ + 2] = val >> 8;
      that.gioUint8Array[off_ + 3] = val;
    };

    C1964jsMemory.prototype.writeDummy8 = function(that, val, a) {
      var off_;
      off_ = a & 0x0000fffc;
      that.dummyReadWriteUint8Array[off_] = val;
    };

    C1964jsMemory.prototype.writeDummy16 = function(that, val, a) {
      var off_;
      off_ = a & 0x0000fffc;
      that.dummyReadWriteUint8Array[off_] = val >> 8;
      that.dummyReadWriteUint8Array[off_ + 1] = val;
    };

    C1964jsMemory.prototype.writeDummy32 = function(that, val, a) {
      var off_;
      off_ = a & 0x0000fffc;
      that.dummyReadWriteUint8Array[off_] = val >> 24;
      that.dummyReadWriteUint8Array[off_ + 1] = val >> 16;
      that.dummyReadWriteUint8Array[off_ + 2] = val >> 8;
      that.dummyReadWriteUint8Array[off_ + 3] = val;
    };

    C1964jsMemory.prototype.virtualToPhysical = function(a) {
      return (this.physRegion[a >>> 12] << 16) | (a & 0x0000ffff);
    };

    C1964jsMemory.prototype.readTLB8 = function(that, a) {
      var region;
      a = that.virtualToPhysical(a);
      region = that.region[a >>> 14];
      if (region === that.readTLB8) {
        region = that.readDummy8;
      }
      return region(that, a);
    };

    C1964jsMemory.prototype.writeTLB8 = function(that, val, a, pc, isDelaySlot) {
      var region;
      a = that.virtualToPhysical(a);
      region = that.writeRegion8[a >>> 14];
      if (region === that.writeTLB8) {
        region = that.writeDummy8;
      }
      region(that, val, a, pc, isDelaySlot);
    };

    C1964jsMemory.prototype.readTLB16 = function(that, a) {
      var region16;
      a = that.virtualToPhysical(a);
      region16 = that.region16[a >>> 14];
      if (region16 === that.readTLB16) {
        region16 = that.readDummy16;
      }
      return region16(that, a);
    };

    C1964jsMemory.prototype.writeTLB16 = function(that, val, a, pc, isDelaySlot) {
      var region16;
      a = that.virtualToPhysical(a);
      region16 = that.writeRegion16[a >>> 14];
      if (region16 === that.writeTLB16) {
        region16 = that.writeDummy16;
      }
      region16(that, val, a, pc, isDelaySlot);
    };

    C1964jsMemory.prototype.readTLB32 = function(that, a) {
      var region32;
      a = that.virtualToPhysical(a);
      region32 = that.region32[a >>> 14];
      if (region32 === that.readTLB32) {
        region32 = that.readDummy32;
      }
      return region32(that, a);
    };

    C1964jsMemory.prototype.writeTLB32 = function(that, val, a, pc, isDelaySlot) {
      var region32;
      a = that.virtualToPhysical(a);
      region32 = that.writeRegion32[a >>> 14];
      if (region32 === that.writeTLB32) {
        region32 = that.writeDummy;
      }
      region32(that, val, a, pc, isDelaySlot);
    };

    C1964jsMemory.prototype.initPhysRegions = function() {
      var i;
      this.physRegion = new Int16Array(0x100000);
      i = 0;
      while (i < 0x100000) {
        this.physRegion[i] = (i & 0x1ffff) >>> 4;
        i++;
      }
    };

    C1964jsMemory.prototype.getInt8 = function(region, off_) {
      return region[off_];
    };

    C1964jsMemory.prototype.getInt16 = function(region, off_) {
      return region[off_] << 8 | region[off_ + 1];
    };

    C1964jsMemory.prototype.getInt32 = function(uregion, off_) {
      return uregion[off_] << 24 | uregion[off_ + 1] << 16 | uregion[off_ + 2] << 8 | uregion[off_ + 3];
    };

    C1964jsMemory.prototype.getUint32 = function(uregion, off_) {
      return uregion[off_] << 24 | uregion[off_ + 1] << 16 | uregion[off_ + 2] << 8 | uregion[off_ + 3];
    };

    C1964jsMemory.prototype.setInt8 = function(uregion, off_, val) {
      uregion[off_] = val;
    };

    C1964jsMemory.prototype.setInt32 = function(uregion, off_, val) {
      uregion[off_] = val >> 24;
      uregion[off_ + 1] = val >> 16;
      uregion[off_ + 2] = val >> 8;
      uregion[off_ + 3] = val;
    };

    C1964jsMemory.prototype.setInt16 = function(uregion, off_, val) {
      uregion[off_] = val >> 8;
      uregion[off_ + 1] = val;
    };

    C1964jsMemory.prototype.lb = function(addr) {
      var a;
      a = this.virtualToPhysical(addr);
      return this.region[a >>> 14](this, a);
    };

    C1964jsMemory.prototype.lh = function(addr) {
      var a;
      a = this.virtualToPhysical(addr);
      return this.region16[a >>> 14](this, a);
    };

    C1964jsMemory.prototype.lw = function(addr) {
      var a;
      a = this.virtualToPhysical(addr);
      return this.region32[a >>> 14](this, a);
    };

    C1964jsMemory.prototype.sw = function(val, addr, pc, isDelaySlot) {
      var a;
      a = this.virtualToPhysical(addr);
      this.writeRegion32[a >>> 14](this, val, a, pc, isDelaySlot);
    };

    C1964jsMemory.prototype.sb = function(val, addr, pc, isDelaySlot) {
      var a;
      a = this.virtualToPhysical(addr);
      this.writeRegion8[a >>> 14](this, val, a, pc, isDelaySlot);
    };

    C1964jsMemory.prototype.sh = function(val, addr, pc, isDelaySlot) {
      var a;
      a = this.virtualToPhysical(addr);
      this.writeRegion16[a >>> 14](this, val, a, pc, isDelaySlot);
    };

    return C1964jsMemory;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.C1964jsMemory = C1964jsMemory;

}).call(this);

// Generated by CoffeeScript 1.4.0

/*1964js - JavaScript/HTML5 port of 1964 - N64 emulator
Copyright (C) 2012 Joel Middendorf

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/


(function() {
  "use strict";

  var C1964jsPif, root;

  C1964jsPif = (function() {

    function C1964jsPif(pifUint8Array) {
      this.pifUint8Array = pifUint8Array;
      this.eepromStatusByte = 0x80;
      this.controlsPresent = new Array(4);
      this.eeprom = new Uint8Array(0x1000);
      this.controlsPresent[0] = true;
      this.controlsPresent[1] = false;
      this.controlsPresent[2] = false;
      this.controlsPresent[3] = false;
      this.g1964buttons = 0x00000000;
      window.onkeydown = this.onKeyDown.bind(this);
      window.onkeyup = this.onKeyUp.bind(this);
    }

    C1964jsPif.prototype.processPif = function() {
      var cmd, count, device, pifRamStart;
      cmd = void 0;
      device = 0;
      count = 0;
      pifRamStart = consts.MEMORY_START_PIF_RAM - consts.MEMORY_START_PIF;
      if ((this.pifUint8Array[pifRamStart] === 0xff) && (this.pifUint8Array[pifRamStart + 1] === 0xff) && (this.pifUint8Array[pifRamStart + 2] === 0xff) && (this.pifUint8Array[pifRamStart + 3] === 0xff)) {
        throw Error("todo: decrypt");
      }
      count = 0;
      while (count < 64) {
        cmd = this.pifUint8Array[pifRamStart + count];
        if (cmd === 0xFE) {
          break;
        } else if (cmd !== 0xFF && cmd !== 0xFD && cmd !== 0xB4 && cmd !== 0x56 && cmd !== 0xB8) {
          if (cmd === 0) {
            device += 1;
          } else if (device === 4) {
            this.processEeprom(pifRamStart, count);
            break;
          } else if (device < 4) {
            if (this.processController(count, device, pifRamStart) === false) {
              break;
            }
            device += 1;
            count += cmd + (this.pifUint8Array[pifRamStart + count + 1] & 0x3F) + 1;
          } else {
            log("Device > 4. Device = " + device);
            break;
          }
        }
        count += 1;
      }
      this.pifUint8Array[pifRamStart + 63] = 0;
    };

    C1964jsPif.prototype.processEeprom = function(pifRamStart, count) {
      switch (this.pifUint8Array[pifRamStart + count + 2]) {
        case 0xFF:
        case 0x00:
          this.pifUint8Array[pifRamStart + count + 3] = 0x00;
          this.pifUint8Array[pifRamStart + count + 4] = this.eepromStatusByte;
          this.pifUint8Array[pifRamStart + count + 5] = 0x00;
          break;
        case 0x04:
          this.readEeprom(pifRamStart, count + 4, this.pifUint8Array[pifRamStart + count + 3] * 8);
          break;
        case 0x05:
          this.writeEeprom(pifRamStart, count + 4, this.pifUint8Array[pifRamStart + count + 3] * 8);
          break;
      }
      return false;
    };

    C1964jsPif.prototype.readEeprom = function(pifRamStart, count, offset) {
      this.pifUint8Array[pifRamStart + count] = this.eeprom[offset];
      this.pifUint8Array[pifRamStart + count + 1] = this.eeprom[offset + 1];
      this.pifUint8Array[pifRamStart + count + 2] = this.eeprom[offset + 2];
      this.pifUint8Array[pifRamStart + count + 3] = this.eeprom[offset + 3];
      this.pifUint8Array[pifRamStart + count + 4] = this.eeprom[offset + 4];
      this.pifUint8Array[pifRamStart + count + 5] = this.eeprom[offset + 5];
      this.pifUint8Array[pifRamStart + count + 6] = this.eeprom[offset + 6];
      this.pifUint8Array[pifRamStart + count + 7] = this.eeprom[offset + 7];
    };

    C1964jsPif.prototype.writeEeprom = function(pifRamStart, count, offset) {
      this.eeprom[offset] = this.pifUint8Array[pifRamStart + count];
      this.eeprom[offset + 1] = this.pifUint8Array[pifRamStart + count + 1];
      this.eeprom[offset + 2] = this.pifUint8Array[pifRamStart + count + 2];
      this.eeprom[offset + 3] = this.pifUint8Array[pifRamStart + count + 3];
      this.eeprom[offset + 4] = this.pifUint8Array[pifRamStart + count + 4];
      this.eeprom[offset + 5] = this.pifUint8Array[pifRamStart + count + 5];
      this.eeprom[offset + 6] = this.pifUint8Array[pifRamStart + count + 6];
      this.eeprom[offset + 7] = this.pifUint8Array[pifRamStart + count + 7];
    };

    C1964jsPif.prototype.processController = function(count, device, pifRamStart) {
      var buttons, cmd;
      if (this.controlsPresent[device] === false) {
        this.pifUint8Array[pifRamStart + count + 1] |= 0x80;
        this.pifUint8Array[pifRamStart + count + 3] = 0;
        this.pifUint8Array[pifRamStart + count + 4] = 0;
        this.pifUint8Array[pifRamStart + count + 5] = 0;
        return true;
      }
      buttons = void 0;
      cmd = this.pifUint8Array[pifRamStart + count + 2];
      switch (cmd) {
        case 0xFF:
        case 0:
          this.pifUint8Array[pifRamStart + count + 3] = 5;
          this.pifUint8Array[pifRamStart + count + 4] = 0;
          this.pifUint8Array[pifRamStart + count + 5] = 0;
          break;
        case 1:
          buttons = this.readControllerData();
          this.pifUint8Array[pifRamStart + count + 3] = buttons >> 24;
          this.pifUint8Array[pifRamStart + count + 4] = buttons >> 16;
          this.pifUint8Array[pifRamStart + count + 5] = buttons >> 8;
          this.pifUint8Array[pifRamStart + count + 6] = buttons;
          break;
        case 2:
        case 3:
          log("todo: read/write controller pak");
          return false;
        default:
          log("unknown controller command: " + cmd);
      }
      return true;
    };

    C1964jsPif.prototype.readControllerData = function() {
      return this.g1964buttons;
    };

    return C1964jsPif;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.C1964jsPif = C1964jsPif;

}).call(this);

// Generated by CoffeeScript 1.4.0

/*1964js - JavaScript/HTML5 port of 1964 - N64 emulator
Copyright (C) 2012 Joel Middendorf

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/


(function() {
  var abortRead, alertMessage, errorHandler, g_settings, getUrlVars, handleFileSelect, initTryCatch, reader, showValue, toggleUi, uncompressAndRun, updateProgress;

  g_settings = void 0;

  reader = void 0;

  this.progress = document.querySelector(".percent");

  alertMessage = "";

  if (!window.File) {
    alertMessage += " window.File";
  } else if (!window.FileReader) {
    alertMessage += " window.FileReader";
  } else if (!window.FileList) {
    alertMessage += " window.FileList";
  } else {
    if (!window.Blob) {
      alertMessge += " window.Blob";
    }
  }

  if (alertMessage.length > 0) {
    log("Unsupported in this browser: " + alertMessage);
  }

  this.i1964js = void 0;

  showValue = function(newValue) {
    var c, ctx;
    document.getElementById("range").innerHTML = newValue;
    c = document.getElementById("DebugCanvas");
    ctx = c.getContext("2d");
    if (ImDat2) {
      repaint(ctx, ImDat2, newValue | 0);
    }
  };

  getUrlVars = function() {
    var hash, hashes, i, vars;
    vars = [];
    hash = void 0;
    hashes = window.location.href.slice(window.location.href.indexOf("?") + 1).split("&");
    i = 0;
    while (i < hashes.length) {
      hash = hashes[i].split("=");
      vars.push(hash[0]);
      vars[hash[0]] = unescape(hash[1]);
      i++;
    }
    return vars;
  };

  initTryCatch = function(buffer) {
    try {
      if (this.i1964js !== undefined && (this.i1964js != null)) {
        this.i1964js.stopEmulatorAndCleanup();
      }
      this.i1964js = new C1964jsEmulator(g_settings);
      this.i1964js.init(buffer);
    } catch (e) {
      if (this.i1964js !== undefined && (this.i1964js != null)) {
        this.i1964js.terminate = true;
      }
      throw e;
    }
  };

  uncompressAndRun = function(romPath, response) {
    var buffer, unzipper;
    if (romPath.split(".").pop().toLowerCase() !== "zip") {
      buffer = new Uint8Array(response);
      this.romLength = buffer.byteLength;
      initTryCatch(buffer);
    } else {
      unzipper = new bitjs.archive.Unzipper(response, "lib/bitjs/");
      unzipper.addEventListener(bitjs.archive.UnarchiveEvent.Type.EXTRACT, function(e) {
        if (e.unarchivedFile) {
          console.log("extracted: " + e.unarchivedFile.filename);
          buffer = new Uint8Array(e.unarchivedFile.fileData);
          this.romLength = buffer.byteLength;
          return initTryCatch(buffer);
        }
      });
      unzipper.addEventListener(bitjs.archive.UnarchiveEvent.Type.INFO, function(e) {
        return console.log("zip info: " + e.msg);
      });
      unzipper.addEventListener(bitjs.archive.UnarchiveEvent.Type.PROGRESS, function(e) {});
      unzipper.addEventListener(bitjs.archive.UnarchiveEvent.Type.FINISH, function(e) {
        return console.log("finish: " + e.msg);
      });
      unzipper.addEventListener(bitjs.archive.UnarchiveEvent.Type.ERROR, function(e) {
        return console.log("ERROR: " + e.msg);
      });
      unzipper.start();
    }
  };

  this.start1964 = function(settings) {
    var i, romPath, vars, xhr,
      _this = this;
    g_settings = settings;
    document.getElementById("user_panel").className = "show";
    vars = getUrlVars();
    romPath = void 0;
    i = 0;
    while (i < vars.length) {
      if (vars[i] === "rom") {
        romPath = vars[vars[i]];
      }
      i++;
    }
    if (romPath !== undefined && (romPath != null)) {
      xhr = new XMLHttpRequest();
      xhr.open("GET", romPath, true);
      xhr.responseType = "arraybuffer";
      xhr.send();
      xhr.onload = function(e) {
        return uncompressAndRun(romPath, e.target.response);
      };
    }
  };

  abortRead = function() {
    reader.abort();
  };

  toggleUi = function() {
    var el;
    el = document.getElementById("user_panel");
    if (el.className === "") {
      el.className = "show_fast";
    } else {
      el.className = "";
    }
  };

  errorHandler = function(evt) {
    switch (evt.target.error.code) {
      case evt.target.error.NOT_FOUND_ERR:
        alert("File Not Found!");
        break;
      case evt.target.error.NOT_READABLE_ERR:
        alert("File is not readable");
        break;
      case evt.target.error.ABORT_ERR:
        break;
      default:
        alert("An error occurred reading this file.");
    }
  };

  updateProgress = function(evt) {
    var percentLoaded;
    if (evt.lengthComputable) {
      percentLoaded = Math.round((evt.loaded / evt.total) * 100);
      if (percentLoaded < 100) {
        if (this.progress !== undefined) {
          this.progress.style.width = percentLoaded + "%";
          this.progress.textContent = percentLoaded + "%";
        }
      }
    }
  };

  handleFileSelect = function(evt) {
    var fileName;
    if (evt.target.files === void 0 || evt.target.files[0] === void 0) {
      return;
    }
    fileName = evt.target.files[0].name;
    this.progressBar = document.getElementById("progress_bar");
    if (this.progress !== undefined) {
      this.progress.style.width = "0%";
      this.progress.textContent = "0%";
    }
    reader = new FileReader();
    reader.onerror = errorHandler;
    reader.onprogress = updateProgress;
    reader.onabort = function(e) {
      alert("File read cancelled");
    };
    reader.onloadstart = function(e) {
      if (this.progressBar !== undefined) {
        document.getElementById("progress_bar").className = "loading";
      }
    };
    reader.onload = function(e) {
      if (this.progress !== undefined) {
        this.progress.style.width = "100%";
        this.progress.textContent = "100%";
      }
      if (this.progressBar !== undefined) {
        setTimeout("document.getElementById('progress_bar').className='';document.getElementById('user_panel').className='';", 1000);
      }
      uncompressAndRun(fileName, reader.result);
    };
    reader.readAsArrayBuffer(evt.target.files[0]);
  };

  document.getElementById("user_panel").onmousemove = function() {
    return document.getElementById("user_panel").className = "show";
  };

  document.getElementById("user_panel").ontouchend = function(event) {
    document.getElementById("user_panel").className = "show";
    event.cancelBubble = true;
    if (event.stopPropagation) {
      return event.stopPropagation();
    }
  };

  document.getElementById("user_panel").onmouseup = function(event) {
    event.cancelBubble = true;
    if (event.stopPropagation) {
      return event.stopPropagation();
    }
  };

  document.onmouseup = function(event) {
    return document.getElementById("user_panel").className = document.getElementById("user_panel").className === "" ? "show" : "";
  };

  document.ontouchend = function(event) {
    return document.getElementById("user_panel").className = document.getElementById("user_panel").className === "" ? "show" : "";
  };

  document.getElementById("files").addEventListener("change", handleFileSelect, false);

}).call(this);
